import asyncio
import random
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

BOT_TOKEN = '7745952395:AAG99TwbXM0gsKmbVjJjE75DOj2xK9UOD_U'

participants = {}
CHANNEL_ID = None
current_prize = ""
current_image_url = ""
raffle_end_time = None
raffle_active = False
selected_winner = None
raffle_message_template = ""  # –¢–µ–∫—Å—Ç —Å –¥–∞—Ç–æ–π –∏ –ø—Ä–∏–∑–æ–º


async def set_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CHANNEL_ID
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /setchannel <@username –∏–ª–∏ -100...>")
        return
    CHANNEL_ID = context.args[0]
    await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {CHANNEL_ID}")


async def start_raffle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_prize, current_image_url, CHANNEL_ID
    global raffle_end_time, raffle_active, participants, raffle_message_template, selected_winner

    selected_winner = None  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è

    if len(context.args) < 4:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "/raffle \"–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–∞\" <—Å—Å—ã–ª–∫–∞_–Ω–∞_—Ñ–æ—Ç–æ> <YYYY-MM-DD HH:MM>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/raffle \"–ê–π—Ñ–æ–Ω\" https://img.jpg 2025-07-25 21:30"
        )
        return

    full_text = " ".join(context.args)
    if full_text.count("\"") < 2:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /raffle \"PlayStation 5\" https://img.jpg 2025-07-25 21:30")
        return

    current_prize = full_text.split("\"")[1]
    rest = full_text.split("\"")[2].strip()

    parts = rest.split()
    if len(parts) < 3:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: YYYY-MM-DD HH:MM")
        return

    current_image_url = parts[0]
    end_str = " ".join(parts[1:3])

    try:
        raffle_end_time = datetime.strptime(end_str, "%Y-%m-%d %H:%M")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π: YYYY-MM-DD HH:MM")
        return

    raffle_active = True
    participants.clear()

    keyboard = [[InlineKeyboardButton("‚úÖ –Ø —É—á–∞—Å—Ç–≤—É—é!", callback_data="join_raffle")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    raffle_message_template = (
        f"üéâ *–†–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞–ª—Å—è!*\n\n"
        f"üéÅ *–ü—Ä–∏–∑:* {current_prize}\n"
        f"‚è∞ *–ó–∞–∫–æ–Ω—á–∏—Ç—Å—è:* {raffle_end_time.strftime('%Y-%m-%d %H:%M')}\n\n"
        f"–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!"
    )

    try:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=current_image_url,
            caption=raffle_message_template,
            reply_markup=reply_markup,
            parse_mode="Markdown",
        )

        if CHANNEL_ID:
            await context.bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=current_image_url,
                caption=raffle_message_template,
                reply_markup=reply_markup,
                parse_mode="Markdown",
            )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

    asyncio.create_task(check_raffle_end(context.bot))


async def check_raffle_end(bot):
    global raffle_active, raffle_end_time, participants, current_prize, selected_winner

    while raffle_active:
        now = datetime.now()
        if now >= raffle_end_time:
            raffle_active = False
            if participants:
                if selected_winner:
                    winner_name = selected_winner
                else:
                    _, winner_name = random.choice(list(participants.items()))

                text = (
                    f"‚è∞ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
                    f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n"
                    f"üéÅ –ü—Ä–∏–∑: {current_prize}\n"
                    f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ"
                )
            else:
                text = "‚è∞ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω!\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –±—ã–ª–æ."

            if CHANNEL_ID:
                await bot.send_message(chat_id=CHANNEL_ID, text=text)

            participants.clear()
            selected_winner = None
            break
        await asyncio.sleep(30)


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global raffle_active, participants, raffle_message_template
    query = update.callback_query
    user = query.from_user
    await query.answer()

    if not raffle_active:
        await query.answer("‚ùå –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω, —É—á–∞—Å—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.", show_alert=True)
        return

    if user.id not in participants:
        participants[user.id] = f"@{user.username}" if user.username else user.full_name
        new_text = (
            f"{raffle_message_template}\n\n"
            f"üìå –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}"
        )
        keyboard = [[InlineKeyboardButton("‚úÖ –Ø —É—á–∞—Å—Ç–≤—É—é!", callback_data="join_raffle")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_caption(caption=new_text, reply_markup=reply_markup)
    else:
        await query.answer("–¢—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—à—å.", show_alert=True)


async def show_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if participants:
        msg = "**–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:**\n" + "\n".join(f"- {name}" for name in participants.values())
    else:
        msg = "‚ùó –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç."
    await update.message.reply_text(msg)


async def pick_winner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CHANNEL_ID, current_prize, current_image_url, selected_winner
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /pick @username")
        return

    username = context.args[0].lstrip("@")

    found = None
    for name in participants.values():
        if name.lstrip("@").lower() == username.lower():
            found = name
            break

    if found:
        selected_winner = found
        result_text = (
            f"üèÜ *–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:* {found}\n"
            f"üéÅ –ü—Ä–∏–∑: {current_prize}\n\n"
            f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ"
        )
        await update.message.reply_text(result_text, parse_mode="Markdown")

        if CHANNEL_ID:
            try:
                await context.bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=current_image_url,
                    caption=result_text,
                    parse_mode="Markdown",
                )
            except Exception as e:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
    else:
        await update.message.reply_text(f"{context.args[0]} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.")


async def set_winner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global selected_winner, participants
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /setwinner @username")
        return

    username = context.args[0].lstrip("@")

    found = None
    for name in participants.values():
        if name.lstrip("@").lower() == username.lower():
            found = name
            break

    if found:
        selected_winner = found
        await update.message.reply_text(f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∑–∞—Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω: {selected_winner}")
    else:
        await update.message.reply_text(f"{context.args[0]} –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.")


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n\n"
        "/setchannel <@–∫–∞–Ω–∞–ª –∏–ª–∏ -100...> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π\n"
        "/raffle \"–ø—Ä–∏–∑\" <—Å—Å—ã–ª–∫–∞_–Ω–∞_—Ñ–æ—Ç–æ> <YYYY-MM-DD HH:MM> ‚Äî –Ω–∞—á–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à\n"
        "/participants ‚Äî —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n"
        "/pick @username ‚Äî –≤—Ä—É—á–Ω—É—é –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n"
        "/setwinner @username ‚Äî –∑–∞—Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É *¬´–Ø —É—á–∞—Å—Ç–≤—É—é!¬ª* –ø–æ–¥ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


def run_bot():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("setchannel", set_channel))
    app.add_handler(CommandHandler("raffle", start_raffle))
    app.add_handler(CommandHandler("participants", show_participants))
    app.add_handler(CommandHandler("pick", pick_winner))
    app.add_handler(CommandHandler("setwinner", set_winner))
    app.add_handler(CommandHandler("help", show_help))
    app.add_handler(CallbackQueryHandler(button_click, pattern="join_raffle"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()


if __name__ == "__main__":
    run_bot()
